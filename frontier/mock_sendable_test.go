// Code generated by pegomock. DO NOT EDIT.
// Source: wchat.im/frontier (interfaces: Sendable)

package frontier

import (
	pegomock "github.com/petergtz/pegomock"
	"reflect"
	"time"
)

type MockSendable struct {
	fail func(message string, callerSkip ...int)
}

func NewMockSendable(options ...pegomock.Option) *MockSendable {
	mock := &MockSendable{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockSendable) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockSendable) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockSendable) Hash() int {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockSendable().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Hash", params, []reflect.Type{reflect.TypeOf((*int)(nil)).Elem()})
	var ret0 int
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(int)
		}
	}
	return ret0
}

func (mock *MockSendable) Send(_param0 Message) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockSendable().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Send", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockSendable) String() string {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockSendable().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("String", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem()})
	var ret0 string
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
	}
	return ret0
}

func (mock *MockSendable) VerifyWasCalledOnce() *VerifierMockSendable {
	return &VerifierMockSendable{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockSendable) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierMockSendable {
	return &VerifierMockSendable{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockSendable) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierMockSendable {
	return &VerifierMockSendable{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockSendable) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierMockSendable {
	return &VerifierMockSendable{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockSendable struct {
	mock                   *MockSendable
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockSendable) Hash() *MockSendable_Hash_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Hash", params, verifier.timeout)
	return &MockSendable_Hash_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockSendable_Hash_OngoingVerification struct {
	mock              *MockSendable
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockSendable_Hash_OngoingVerification) GetCapturedArguments() {
}

func (c *MockSendable_Hash_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockSendable) Send(_param0 Message) *MockSendable_Send_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Send", params, verifier.timeout)
	return &MockSendable_Send_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockSendable_Send_OngoingVerification struct {
	mock              *MockSendable
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockSendable_Send_OngoingVerification) GetCapturedArguments() Message {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockSendable_Send_OngoingVerification) GetAllCapturedArguments() (_param0 []Message) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]Message, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(Message)
		}
	}
	return
}

func (verifier *VerifierMockSendable) String() *MockSendable_String_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "String", params, verifier.timeout)
	return &MockSendable_String_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockSendable_String_OngoingVerification struct {
	mock              *MockSendable
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockSendable_String_OngoingVerification) GetCapturedArguments() {
}

func (c *MockSendable_String_OngoingVerification) GetAllCapturedArguments() {
}
