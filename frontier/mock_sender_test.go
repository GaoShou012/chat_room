// Code generated by pegomock. DO NOT EDIT.
// Source: wchat.im/frontier (interfaces: Sender)

package frontier

import (
	pegomock "github.com/petergtz/pegomock"
	"reflect"
	"time"
)

type MockSender struct {
	fail func(message string, callerSkip ...int)
}

func NewMockSender(options ...pegomock.Option) *MockSender {
	mock := &MockSender{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockSender) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockSender) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockSender) SendTo(_param0 Sendable, _param1 Message) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockSender().")
	}
	params := []pegomock.Param{_param0, _param1}
	pegomock.GetGenericMockFrom(mock).Invoke("SendTo", params, []reflect.Type{})
}

func (mock *MockSender) VerifyWasCalledOnce() *VerifierMockSender {
	return &VerifierMockSender{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockSender) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierMockSender {
	return &VerifierMockSender{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockSender) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierMockSender {
	return &VerifierMockSender{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockSender) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierMockSender {
	return &VerifierMockSender{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockSender struct {
	mock                   *MockSender
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockSender) SendTo(_param0 Sendable, _param1 Message) *MockSender_SendTo_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SendTo", params, verifier.timeout)
	return &MockSender_SendTo_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockSender_SendTo_OngoingVerification struct {
	mock              *MockSender
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockSender_SendTo_OngoingVerification) GetCapturedArguments() (Sendable, Message) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *MockSender_SendTo_OngoingVerification) GetAllCapturedArguments() (_param0 []Sendable, _param1 []Message) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]Sendable, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(Sendable)
		}
		_param1 = make([]Message, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(Message)
		}
	}
	return
}
