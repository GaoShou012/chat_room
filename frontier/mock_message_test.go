// Code generated by pegomock. DO NOT EDIT.
// Source: wchat.im/frontier (interfaces: Message)

package frontier

import (
	pegomock "github.com/petergtz/pegomock"
	"reflect"
	"time"
	message "wchat.im/proto/message"
)

type MockMessage struct {
	fail func(message string, callerSkip ...int)
}

func NewMockMessage(options ...pegomock.Option) *MockMessage {
	mock := &MockMessage{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockMessage) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockMessage) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockMessage) GetRId() string {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockMessage().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetRId", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem()})
	var ret0 string
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
	}
	return ret0
}

func (mock *MockMessage) GetRType() message.RType {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockMessage().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetRType", params, []reflect.Type{reflect.TypeOf((*message.RType)(nil)).Elem()})
	var ret0 message.RType
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(message.RType)
		}
	}
	return ret0
}

func (mock *MockMessage) VerifyWasCalledOnce() *VerifierMockMessage {
	return &VerifierMockMessage{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockMessage) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierMockMessage {
	return &VerifierMockMessage{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockMessage) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierMockMessage {
	return &VerifierMockMessage{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockMessage) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierMockMessage {
	return &VerifierMockMessage{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockMessage struct {
	mock                   *MockMessage
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockMessage) GetRId() *MockMessage_GetRId_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetRId", params, verifier.timeout)
	return &MockMessage_GetRId_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockMessage_GetRId_OngoingVerification struct {
	mock              *MockMessage
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockMessage_GetRId_OngoingVerification) GetCapturedArguments() {
}

func (c *MockMessage_GetRId_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockMessage) GetRType() *MockMessage_GetRType_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetRType", params, verifier.timeout)
	return &MockMessage_GetRType_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockMessage_GetRType_OngoingVerification struct {
	mock              *MockMessage
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockMessage_GetRType_OngoingVerification) GetCapturedArguments() {
}

func (c *MockMessage_GetRType_OngoingVerification) GetAllCapturedArguments() {
}
