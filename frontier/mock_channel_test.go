// Code generated by pegomock. DO NOT EDIT.
// Source: wchat.im/frontier (interfaces: Channel)

package frontier

import (
	pegomock "github.com/petergtz/pegomock"
	"reflect"
	"time"
)

type MockChannel struct {
	fail func(message string, callerSkip ...int)
}

func NewMockChannel(options ...pegomock.Option) *MockChannel {
	mock := &MockChannel{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockChannel) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockChannel) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockChannel) Accept(_param0 Accepter) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockChannel().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Accept", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockChannel) Close() error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockChannel().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Close", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockChannel) Context() Context {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockChannel().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Context", params, []reflect.Type{reflect.TypeOf((*Context)(nil)).Elem()})
	var ret0 Context
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(Context)
		}
	}
	return ret0
}

func (mock *MockChannel) DelAnchor(_param0 Leavable) bool {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockChannel().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("DelAnchor", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem()})
	var ret0 bool
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
	}
	return ret0
}

func (mock *MockChannel) DelAnchors() {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockChannel().")
	}
	params := []pegomock.Param{}
	pegomock.GetGenericMockFrom(mock).Invoke("DelAnchors", params, []reflect.Type{})
}

func (mock *MockChannel) Hash() int {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockChannel().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Hash", params, []reflect.Type{reflect.TypeOf((*int)(nil)).Elem()})
	var ret0 int
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(int)
		}
	}
	return ret0
}

func (mock *MockChannel) IsAnchored(_param0 Leavable) bool {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockChannel().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("IsAnchored", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem()})
	var ret0 bool
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
	}
	return ret0
}

func (mock *MockChannel) Receive() (Message, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockChannel().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Receive", params, []reflect.Type{reflect.TypeOf((*Message)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 Message
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(Message)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockChannel) Send(_param0 Message) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockChannel().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Send", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockChannel) SetAnchor(_param0 Leavable, _param1 interface{}) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockChannel().")
	}
	params := []pegomock.Param{_param0, _param1}
	pegomock.GetGenericMockFrom(mock).Invoke("SetAnchor", params, []reflect.Type{})
}

func (mock *MockChannel) String() string {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockChannel().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("String", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem()})
	var ret0 string
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
	}
	return ret0
}

func (mock *MockChannel) VerifyWasCalledOnce() *VerifierMockChannel {
	return &VerifierMockChannel{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockChannel) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierMockChannel {
	return &VerifierMockChannel{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockChannel) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierMockChannel {
	return &VerifierMockChannel{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockChannel) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierMockChannel {
	return &VerifierMockChannel{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockChannel struct {
	mock                   *MockChannel
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockChannel) Accept(_param0 Accepter) *MockChannel_Accept_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Accept", params, verifier.timeout)
	return &MockChannel_Accept_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockChannel_Accept_OngoingVerification struct {
	mock              *MockChannel
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockChannel_Accept_OngoingVerification) GetCapturedArguments() Accepter {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockChannel_Accept_OngoingVerification) GetAllCapturedArguments() (_param0 []Accepter) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]Accepter, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(Accepter)
		}
	}
	return
}

func (verifier *VerifierMockChannel) Close() *MockChannel_Close_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Close", params, verifier.timeout)
	return &MockChannel_Close_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockChannel_Close_OngoingVerification struct {
	mock              *MockChannel
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockChannel_Close_OngoingVerification) GetCapturedArguments() {
}

func (c *MockChannel_Close_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockChannel) Context() *MockChannel_Context_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Context", params, verifier.timeout)
	return &MockChannel_Context_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockChannel_Context_OngoingVerification struct {
	mock              *MockChannel
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockChannel_Context_OngoingVerification) GetCapturedArguments() {
}

func (c *MockChannel_Context_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockChannel) DelAnchor(_param0 Leavable) *MockChannel_DelAnchor_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DelAnchor", params, verifier.timeout)
	return &MockChannel_DelAnchor_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockChannel_DelAnchor_OngoingVerification struct {
	mock              *MockChannel
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockChannel_DelAnchor_OngoingVerification) GetCapturedArguments() Leavable {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockChannel_DelAnchor_OngoingVerification) GetAllCapturedArguments() (_param0 []Leavable) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]Leavable, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(Leavable)
		}
	}
	return
}

func (verifier *VerifierMockChannel) DelAnchors() *MockChannel_DelAnchors_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DelAnchors", params, verifier.timeout)
	return &MockChannel_DelAnchors_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockChannel_DelAnchors_OngoingVerification struct {
	mock              *MockChannel
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockChannel_DelAnchors_OngoingVerification) GetCapturedArguments() {
}

func (c *MockChannel_DelAnchors_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockChannel) Hash() *MockChannel_Hash_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Hash", params, verifier.timeout)
	return &MockChannel_Hash_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockChannel_Hash_OngoingVerification struct {
	mock              *MockChannel
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockChannel_Hash_OngoingVerification) GetCapturedArguments() {
}

func (c *MockChannel_Hash_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockChannel) IsAnchored(_param0 Leavable) *MockChannel_IsAnchored_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "IsAnchored", params, verifier.timeout)
	return &MockChannel_IsAnchored_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockChannel_IsAnchored_OngoingVerification struct {
	mock              *MockChannel
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockChannel_IsAnchored_OngoingVerification) GetCapturedArguments() Leavable {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockChannel_IsAnchored_OngoingVerification) GetAllCapturedArguments() (_param0 []Leavable) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]Leavable, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(Leavable)
		}
	}
	return
}

func (verifier *VerifierMockChannel) Receive() *MockChannel_Receive_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Receive", params, verifier.timeout)
	return &MockChannel_Receive_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockChannel_Receive_OngoingVerification struct {
	mock              *MockChannel
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockChannel_Receive_OngoingVerification) GetCapturedArguments() {
}

func (c *MockChannel_Receive_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockChannel) Send(_param0 Message) *MockChannel_Send_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Send", params, verifier.timeout)
	return &MockChannel_Send_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockChannel_Send_OngoingVerification struct {
	mock              *MockChannel
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockChannel_Send_OngoingVerification) GetCapturedArguments() Message {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockChannel_Send_OngoingVerification) GetAllCapturedArguments() (_param0 []Message) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]Message, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(Message)
		}
	}
	return
}

func (verifier *VerifierMockChannel) SetAnchor(_param0 Leavable, _param1 interface{}) *MockChannel_SetAnchor_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SetAnchor", params, verifier.timeout)
	return &MockChannel_SetAnchor_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockChannel_SetAnchor_OngoingVerification struct {
	mock              *MockChannel
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockChannel_SetAnchor_OngoingVerification) GetCapturedArguments() (Leavable, interface{}) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *MockChannel_SetAnchor_OngoingVerification) GetAllCapturedArguments() (_param0 []Leavable, _param1 []interface{}) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]Leavable, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(Leavable)
		}
		_param1 = make([]interface{}, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.(interface{})
		}
	}
	return
}

func (verifier *VerifierMockChannel) String() *MockChannel_String_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "String", params, verifier.timeout)
	return &MockChannel_String_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockChannel_String_OngoingVerification struct {
	mock              *MockChannel
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockChannel_String_OngoingVerification) GetCapturedArguments() {
}

func (c *MockChannel_String_OngoingVerification) GetAllCapturedArguments() {
}
