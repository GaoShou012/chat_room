// Code generated by pegomock. DO NOT EDIT.
// Source: wchat.im/frontier (interfaces: Leavable)

package frontier

import (
	pegomock "github.com/petergtz/pegomock"
	"reflect"
	"time"
)

type MockLeavable struct {
	fail func(message string, callerSkip ...int)
}

func NewMockLeavable(options ...pegomock.Option) *MockLeavable {
	mock := &MockLeavable{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockLeavable) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockLeavable) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockLeavable) Leave(_param0 interface{}) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockLeavable().")
	}
	params := []pegomock.Param{_param0}
	pegomock.GetGenericMockFrom(mock).Invoke("Leave", params, []reflect.Type{})
}

func (mock *MockLeavable) VerifyWasCalledOnce() *VerifierMockLeavable {
	return &VerifierMockLeavable{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockLeavable) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierMockLeavable {
	return &VerifierMockLeavable{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockLeavable) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierMockLeavable {
	return &VerifierMockLeavable{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockLeavable) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierMockLeavable {
	return &VerifierMockLeavable{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockLeavable struct {
	mock                   *MockLeavable
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockLeavable) Leave(_param0 interface{}) *MockLeavable_Leave_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Leave", params, verifier.timeout)
	return &MockLeavable_Leave_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockLeavable_Leave_OngoingVerification struct {
	mock              *MockLeavable
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockLeavable_Leave_OngoingVerification) GetCapturedArguments() interface{} {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockLeavable_Leave_OngoingVerification) GetAllCapturedArguments() (_param0 []interface{}) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]interface{}, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(interface{})
		}
	}
	return
}
