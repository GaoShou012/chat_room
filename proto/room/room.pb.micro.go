// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/room/room.proto

package room

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RoomService service

func NewRoomServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RoomService service

type RoomService interface {
	// 边界机心跳
	FrontierPing(ctx context.Context, in *FrontierPingReq, opts ...client.CallOption) (*FrontierPingRsp, error)
	// 制作用户通行证
	MakePassToken(ctx context.Context, in *MakePassTokenReq, opts ...client.CallOption) (*MakePassTokenRsp, error)
	// 查看用户通行证
	ViewPassToken(ctx context.Context, in *ViewPassTokenReq, opts ...client.CallOption) (*ViewPassTokenRsp, error)
	// 用户加入
	Join(ctx context.Context, in *JoinReq, opts ...client.CallOption) (*JoinRsp, error)
	// 用户离开
	Leave(ctx context.Context, in *LeaveReq, opts ...client.CallOption) (*LeaveRsp, error)
	// 房间用户数量
	GetUsersCount(ctx context.Context, in *GetUsersCountReq, opts ...client.CallOption) (*GetUsersCountRsp, error)
	SetUsersCount(ctx context.Context, in *SetUsersCountReq, opts ...client.CallOption) (*SetUsersCountRsp, error)
	// 广播消息
	Broadcast(ctx context.Context, in *BroadcastReq, opts ...client.CallOption) (*BroadcastRsp, error)
	// 读取消息记录
	Record(ctx context.Context, in *RecordReq, opts ...client.CallOption) (*RecordRsp, error)
	// 读取房间信息
	Info(ctx context.Context, in *InfoReq, opts ...client.CallOption) (*InfoRsp, error)
	SetTenantUserAcl(ctx context.Context, in *SetTenantUserAclReq, opts ...client.CallOption) (*SetTenantUserAclRsp, error)
	GetTenantUserAcl(ctx context.Context, in *GetTenantUserAclReq, opts ...client.CallOption) (*GetTenantUserAclRsp, error)
	SetVirtualUserCount(ctx context.Context, in *SetVirtualUserCountReq, opts ...client.CallOption) (*SetVirtualUserCountRsp, error)
	GetVirtualUserCount(ctx context.Context, in *GetVirtualUserCountReq, opts ...client.CallOption) (*GetVirtualUserCountRsp, error)
}

type roomService struct {
	c    client.Client
	name string
}

func NewRoomService(name string, c client.Client) RoomService {
	return &roomService{
		c:    c,
		name: name,
	}
}

func (c *roomService) FrontierPing(ctx context.Context, in *FrontierPingReq, opts ...client.CallOption) (*FrontierPingRsp, error) {
	req := c.c.NewRequest(c.name, "RoomService.FrontierPing", in)
	out := new(FrontierPingRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomService) MakePassToken(ctx context.Context, in *MakePassTokenReq, opts ...client.CallOption) (*MakePassTokenRsp, error) {
	req := c.c.NewRequest(c.name, "RoomService.MakePassToken", in)
	out := new(MakePassTokenRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomService) ViewPassToken(ctx context.Context, in *ViewPassTokenReq, opts ...client.CallOption) (*ViewPassTokenRsp, error) {
	req := c.c.NewRequest(c.name, "RoomService.ViewPassToken", in)
	out := new(ViewPassTokenRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomService) Join(ctx context.Context, in *JoinReq, opts ...client.CallOption) (*JoinRsp, error) {
	req := c.c.NewRequest(c.name, "RoomService.Join", in)
	out := new(JoinRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomService) Leave(ctx context.Context, in *LeaveReq, opts ...client.CallOption) (*LeaveRsp, error) {
	req := c.c.NewRequest(c.name, "RoomService.Leave", in)
	out := new(LeaveRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomService) GetUsersCount(ctx context.Context, in *GetUsersCountReq, opts ...client.CallOption) (*GetUsersCountRsp, error) {
	req := c.c.NewRequest(c.name, "RoomService.GetUsersCount", in)
	out := new(GetUsersCountRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomService) SetUsersCount(ctx context.Context, in *SetUsersCountReq, opts ...client.CallOption) (*SetUsersCountRsp, error) {
	req := c.c.NewRequest(c.name, "RoomService.SetUsersCount", in)
	out := new(SetUsersCountRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomService) Broadcast(ctx context.Context, in *BroadcastReq, opts ...client.CallOption) (*BroadcastRsp, error) {
	req := c.c.NewRequest(c.name, "RoomService.Broadcast", in)
	out := new(BroadcastRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomService) Record(ctx context.Context, in *RecordReq, opts ...client.CallOption) (*RecordRsp, error) {
	req := c.c.NewRequest(c.name, "RoomService.Record", in)
	out := new(RecordRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomService) Info(ctx context.Context, in *InfoReq, opts ...client.CallOption) (*InfoRsp, error) {
	req := c.c.NewRequest(c.name, "RoomService.Info", in)
	out := new(InfoRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomService) SetTenantUserAcl(ctx context.Context, in *SetTenantUserAclReq, opts ...client.CallOption) (*SetTenantUserAclRsp, error) {
	req := c.c.NewRequest(c.name, "RoomService.SetTenantUserAcl", in)
	out := new(SetTenantUserAclRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomService) GetTenantUserAcl(ctx context.Context, in *GetTenantUserAclReq, opts ...client.CallOption) (*GetTenantUserAclRsp, error) {
	req := c.c.NewRequest(c.name, "RoomService.GetTenantUserAcl", in)
	out := new(GetTenantUserAclRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomService) SetVirtualUserCount(ctx context.Context, in *SetVirtualUserCountReq, opts ...client.CallOption) (*SetVirtualUserCountRsp, error) {
	req := c.c.NewRequest(c.name, "RoomService.SetVirtualUserCount", in)
	out := new(SetVirtualUserCountRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomService) GetVirtualUserCount(ctx context.Context, in *GetVirtualUserCountReq, opts ...client.CallOption) (*GetVirtualUserCountRsp, error) {
	req := c.c.NewRequest(c.name, "RoomService.GetVirtualUserCount", in)
	out := new(GetVirtualUserCountRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoomService service

type RoomServiceHandler interface {
	// 边界机心跳
	FrontierPing(context.Context, *FrontierPingReq, *FrontierPingRsp) error
	// 制作用户通行证
	MakePassToken(context.Context, *MakePassTokenReq, *MakePassTokenRsp) error
	// 查看用户通行证
	ViewPassToken(context.Context, *ViewPassTokenReq, *ViewPassTokenRsp) error
	// 用户加入
	Join(context.Context, *JoinReq, *JoinRsp) error
	// 用户离开
	Leave(context.Context, *LeaveReq, *LeaveRsp) error
	// 房间用户数量
	GetUsersCount(context.Context, *GetUsersCountReq, *GetUsersCountRsp) error
	SetUsersCount(context.Context, *SetUsersCountReq, *SetUsersCountRsp) error
	// 广播消息
	Broadcast(context.Context, *BroadcastReq, *BroadcastRsp) error
	// 读取消息记录
	Record(context.Context, *RecordReq, *RecordRsp) error
	// 读取房间信息
	Info(context.Context, *InfoReq, *InfoRsp) error
	SetTenantUserAcl(context.Context, *SetTenantUserAclReq, *SetTenantUserAclRsp) error
	GetTenantUserAcl(context.Context, *GetTenantUserAclReq, *GetTenantUserAclRsp) error
	SetVirtualUserCount(context.Context, *SetVirtualUserCountReq, *SetVirtualUserCountRsp) error
	GetVirtualUserCount(context.Context, *GetVirtualUserCountReq, *GetVirtualUserCountRsp) error
}

func RegisterRoomServiceHandler(s server.Server, hdlr RoomServiceHandler, opts ...server.HandlerOption) error {
	type roomService interface {
		FrontierPing(ctx context.Context, in *FrontierPingReq, out *FrontierPingRsp) error
		MakePassToken(ctx context.Context, in *MakePassTokenReq, out *MakePassTokenRsp) error
		ViewPassToken(ctx context.Context, in *ViewPassTokenReq, out *ViewPassTokenRsp) error
		Join(ctx context.Context, in *JoinReq, out *JoinRsp) error
		Leave(ctx context.Context, in *LeaveReq, out *LeaveRsp) error
		GetUsersCount(ctx context.Context, in *GetUsersCountReq, out *GetUsersCountRsp) error
		SetUsersCount(ctx context.Context, in *SetUsersCountReq, out *SetUsersCountRsp) error
		Broadcast(ctx context.Context, in *BroadcastReq, out *BroadcastRsp) error
		Record(ctx context.Context, in *RecordReq, out *RecordRsp) error
		Info(ctx context.Context, in *InfoReq, out *InfoRsp) error
		SetTenantUserAcl(ctx context.Context, in *SetTenantUserAclReq, out *SetTenantUserAclRsp) error
		GetTenantUserAcl(ctx context.Context, in *GetTenantUserAclReq, out *GetTenantUserAclRsp) error
		SetVirtualUserCount(ctx context.Context, in *SetVirtualUserCountReq, out *SetVirtualUserCountRsp) error
		GetVirtualUserCount(ctx context.Context, in *GetVirtualUserCountReq, out *GetVirtualUserCountRsp) error
	}
	type RoomService struct {
		roomService
	}
	h := &roomServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RoomService{h}, opts...))
}

type roomServiceHandler struct {
	RoomServiceHandler
}

func (h *roomServiceHandler) FrontierPing(ctx context.Context, in *FrontierPingReq, out *FrontierPingRsp) error {
	return h.RoomServiceHandler.FrontierPing(ctx, in, out)
}

func (h *roomServiceHandler) MakePassToken(ctx context.Context, in *MakePassTokenReq, out *MakePassTokenRsp) error {
	return h.RoomServiceHandler.MakePassToken(ctx, in, out)
}

func (h *roomServiceHandler) ViewPassToken(ctx context.Context, in *ViewPassTokenReq, out *ViewPassTokenRsp) error {
	return h.RoomServiceHandler.ViewPassToken(ctx, in, out)
}

func (h *roomServiceHandler) Join(ctx context.Context, in *JoinReq, out *JoinRsp) error {
	return h.RoomServiceHandler.Join(ctx, in, out)
}

func (h *roomServiceHandler) Leave(ctx context.Context, in *LeaveReq, out *LeaveRsp) error {
	return h.RoomServiceHandler.Leave(ctx, in, out)
}

func (h *roomServiceHandler) GetUsersCount(ctx context.Context, in *GetUsersCountReq, out *GetUsersCountRsp) error {
	return h.RoomServiceHandler.GetUsersCount(ctx, in, out)
}

func (h *roomServiceHandler) SetUsersCount(ctx context.Context, in *SetUsersCountReq, out *SetUsersCountRsp) error {
	return h.RoomServiceHandler.SetUsersCount(ctx, in, out)
}

func (h *roomServiceHandler) Broadcast(ctx context.Context, in *BroadcastReq, out *BroadcastRsp) error {
	return h.RoomServiceHandler.Broadcast(ctx, in, out)
}

func (h *roomServiceHandler) Record(ctx context.Context, in *RecordReq, out *RecordRsp) error {
	return h.RoomServiceHandler.Record(ctx, in, out)
}

func (h *roomServiceHandler) Info(ctx context.Context, in *InfoReq, out *InfoRsp) error {
	return h.RoomServiceHandler.Info(ctx, in, out)
}

func (h *roomServiceHandler) SetTenantUserAcl(ctx context.Context, in *SetTenantUserAclReq, out *SetTenantUserAclRsp) error {
	return h.RoomServiceHandler.SetTenantUserAcl(ctx, in, out)
}

func (h *roomServiceHandler) GetTenantUserAcl(ctx context.Context, in *GetTenantUserAclReq, out *GetTenantUserAclRsp) error {
	return h.RoomServiceHandler.GetTenantUserAcl(ctx, in, out)
}

func (h *roomServiceHandler) SetVirtualUserCount(ctx context.Context, in *SetVirtualUserCountReq, out *SetVirtualUserCountRsp) error {
	return h.RoomServiceHandler.SetVirtualUserCount(ctx, in, out)
}

func (h *roomServiceHandler) GetVirtualUserCount(ctx context.Context, in *GetVirtualUserCountReq, out *GetVirtualUserCountRsp) error {
	return h.RoomServiceHandler.GetVirtualUserCount(ctx, in, out)
}
